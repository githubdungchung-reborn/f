name: Fetch Branch Images

on:
  workflow_dispatch:  # Keep manual trigger without inputs
  schedule:
    - cron: "0 0 1,15 * *"  # Run on the 1st and the 15th of every month

jobs:
  fetch-images:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Initial disk space cleanup
        run: |
          echo "Performing initial system cleanup..."
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0  # Need full history to check branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run fetch branch images script
        id: fetch-images
        run: |
          # Create output directory
          mkdir -p image_urls
          
          # Set timestamp for unique filenames
          timestamp=$(date +%Y%m%d_%H%M%S)
          output_file="image_urls/branch_images_${timestamp}.txt"
          
          # Run the script with current repo owner and name from github context
          python scripts/fetch_branch_images.py \
            "${{ github.repository_owner }}" \
            "${{ github.event.repository.name }}" \
            "$output_file"
          
          # Check if output file was created and has content
          if [ -f "$output_file" ] && [ -s "$output_file" ]; then
            echo "has_results=true" >> $GITHUB_OUTPUT
            echo "output_file=$output_file" >> $GITHUB_OUTPUT
          else
            echo "has_results=false" >> $GITHUB_OUTPUT
          fi

      - name: Process logs
        if: success()
        run: |
          # Remove all existing logs
          rm -rf logs/*
          
          # Create logs directory if it doesn't exist
          mkdir -p logs
          
          # Create success log with sorted image links
          if [ -f "${{ steps.fetch-images.outputs.output_file }}" ]; then
            timestamp=$(date +%Y%m%d_%H%M%S)
            success_log="logs/success_images_${timestamp}.log"
            cat "${{ steps.fetch-images.outputs.output_file }}" >> "$success_log"
          fi
          
          # Compress logs older than 7 days
          find logs -name "*.log" -mtime +7 -exec gzip {} \;

      - name: Commit results
        if: steps.fetch-images.outputs.has_results == 'true'
        run: |
          git config user.name "${{ github.repository_owner }}"
          git config user.email "${{ github.repository_owner }}@users.noreply.github.com"
          
          # Stage all new files
          git add image_urls/
          git add logs/
          
          # Get count of images found
          image_count=$(wc -l < "${{ steps.fetch-images.outputs.output_file }}")
          
          # Check for failed branches log
          failed_count=0
          latest_failed_log=$(find logs -name "failed_branches_*.log" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ")
          if [ -f "$latest_failed_log" ]; then
            failed_count=$(grep -c "Failed to fetch contents for branch:" "$latest_failed_log")
          fi
          
          # Commit changes with status
          commit_message="feat: add $image_count sorted image URLs from branch scan

          - Timestamp: $(date '+%Y-%m-%d %H:%M:%S')
          - Images found and sorted: $image_count
          - Output file: ${{ steps.fetch-images.outputs.output_file }}
          - Success log: logs/success_images_*.log"
          
          if [ $failed_count -gt 0 ]; then
            commit_message="$commit_message
          - Warning: $failed_count branches failed after retries"
          fi
          
          git commit -m "$commit_message"
          git push

      - name: Cleanup old files
        if: always()
        run: |
          # Remove files older than 30 days
          find image_urls -type f -mtime +30 -delete
          find logs -type f -mtime +30 -delete
          
          # Compress files older than 7 days
          find image_urls -type f -mtime +7 -exec gzip {} \;
          find logs -type f -mtime +7 -exec gzip {} \;
          
          # Commit cleanup if needed
          if ! git diff --quiet; then
            git config user.name "${{ github.repository_owner }}"
            git config user.email "${{ github.repository_owner }}@users.noreply.github.com"
            git add -u
            git commit -m "chore: cleanup old files"
            git push
          fi 