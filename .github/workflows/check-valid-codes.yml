name: Check Valid Image Codes

on:
  workflow_dispatch:
    inputs:
      start_range:
        description: "Start range (optional)"
        required: false
        type: string
      end_range:
        description: "End range (optional)"
        required: false
        type: string
  schedule:
    - cron: "0 * * * *"  # Runs at the start of every hour

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      total_end: ${{ steps.set-matrix.outputs.total_end }}
    steps:
      - name: Sparse checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          sparse-checkout: |
            valid_codes_range.json
            .github/workflows/check-valid-codes.yml
          sparse-checkout-cone-mode: false
          fetch-depth: 1

      - name: Load state and prepare matrix
        id: set-matrix
        run: |
          if [ -f valid_codes_range.json ]; then
            start=$(jq -r '.start' valid_codes_range.json)
            end=$(jq -r '.end' valid_codes_range.json)
          else
            start="${{ inputs.start_range || '1000' }}"
            end="${{ inputs.end_range || '2000' }}"
          fi
          
          # Create ranges for each letter a-z
          ranges=()
          for letter in {a..z}; do
              ranges+=("{\"prefix\":\"$letter\",\"start\":$start,\"end\":$end}")
          done
          
          matrix=$(printf '%s\n' "${ranges[@]}" | jq -sc '{range: .}')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "total_end=$end" >> $GITHUB_OUTPUT

  check-codes:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false
      max-parallel: 3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          # Use sparse checkout to minimize disk usage
          sparse-checkout: |
            check_valid_codes.py
            valid_codes_range.json
            valid_codes
          sparse-checkout-cone-mode: false
          fetch-depth: 1
  
      - name: Clean up disk space
        run: |
          echo "Cleaning up disk space before processing..."
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Check valid codes
        run: |
          today=$(date +%Y%m%d)
          log_file="valid_codes/valid_codes_${{ matrix.range.prefix }}_${today}.log"
          mkdir -p valid_codes
          
          python check_valid_codes.py \
            "${{ matrix.range.prefix }}" \
            "${{ matrix.range.start }}" \
            "${{ matrix.range.end }}" \
            "$log_file"
      
      - name: Process and commit changes
        run: |
          git config user.name "${{ github.repository_owner }}"
          git config user.email "${{ github.repository_owner }}@users.noreply.github.com"

          # Update valid_codes_range.json for next run
          next_start=$((${{ needs.prepare-matrix.outputs.total_end }} + 1))
          next_end=$((${{ needs.prepare-matrix.outputs.total_end }} + 1001))
          echo "{\"start\": $next_start, \"end\": $next_end}" > valid_codes_range.json
          
          # Stage files
          git add valid_codes_range.json
          git add valid_codes/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update valid codes for prefix ${{ matrix.range.prefix }} (${next_start} to ${next_end})"
            git push
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -rf valid_codes
          rm -rf .git
          df -h 