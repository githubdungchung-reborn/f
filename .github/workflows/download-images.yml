name: Download Images

on:
  workflow_dispatch:
    inputs:
      start_range:
        description: "Start range (optional)"
        required: false
        type: string
      end_range:
        description: "End range (optional)"
        required: false
        type: string
  schedule:
    - cron: "0 * * * *"  # Runs at the start of every hour

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      total_end: ${{ steps.set-matrix.outputs.total_end }}
    steps:
      - name: Sparse checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          sparse-checkout: |
            range.json
            .github/workflows/download-images.yml
          sparse-checkout-cone-mode: false
          fetch-depth: 1

      - name: Load state and prepare matrix
        id: set-matrix
        run: |
          if [ -f range.json ]; then
            start=$(jq -r '.start' range.json)
            end=$(jq -r '.end' range.json)
          else
            start="${{ inputs.start_range || '1000' }}"
            end="${{ inputs.end_range || '2000' }}"
          fi
          
          # Create ranges for each letter a-z
          for letter in a b c d q r s t u; do
              ranges+=("{\"prefix\":\"$letter\",\"start\":$start,\"end\":$end}")
          done
          
          matrix=$(printf '%s\n' "${ranges[@]}" | jq -sc '{range: .}')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "total_end=$end" >> $GITHUB_OUTPUT

  download-batch:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    outputs:
      has_images: ${{ steps.check-downloads.outputs.has_images }}
      start_range: ${{ matrix.range.start }}
      end_range: ${{ matrix.range.end }}
      prefix: ${{ matrix.range.prefix }}
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false
      max-parallel: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
  
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests Pillow
  
      - name: Process batch
        id: check-downloads
        run: |
          today=$(date +%Y%m%d)
          folder="images_${{ matrix.range.prefix }}_${today}_${{ matrix.range.start }}_to_${{ matrix.range.end }}"
          mkdir -p "$folder"
          
          echo "Processing batch: ${{ matrix.range.prefix }}${{ matrix.range.start }} to ${{ matrix.range.prefix }}${{ matrix.range.end }}"
          python crawler_images.py "${{ matrix.range.prefix }}" "${{ matrix.range.start }}" "${{ matrix.range.end }}" "$folder"
          # Check if any images were downloaded
          image_count=$(find "$folder" -name "*.jpg" | wc -l)
          if [ "$image_count" -eq 0 ]; then
            echo "No images downloaded in this batch"
            echo "has_images=false" >> $GITHUB_OUTPUT
            
            # Log the empty range
            echo "$(date '+%Y-%m-%d %H:%M:%S') - No images found in range ${{ matrix.range.start }} to ${{ matrix.range.end }} with prefix ${{ matrix.range.prefix }}" >> empty_ranges.log
          else
            echo "has_images=true" >> $GITHUB_OUTPUT
          fi
          
          # Export the folder name as an output
          echo "folder_name=$folder" >> $GITHUB_OUTPUT

      - name: Upload batch artifacts
        if: steps.check-downloads.outputs.has_images == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: batch-${{ matrix.range.prefix }}-${{ matrix.range.start }}-${{ matrix.range.end }}
          path: images_${{ matrix.range.prefix }}_*_${{ matrix.range.start }}_to_${{ matrix.range.end }}
          retention-days: 1

      - name: Skip artifact upload
        if: steps.check-downloads.outputs.has_images != 'true'
        run: echo "Skipping artifact upload as no images were downloaded"

  commit-changes:
    needs: [prepare-matrix, download-batch]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloads
          merge-multiple: true

      - name: Check disk space
        run: |
          echo "Checking disk space..."
          df -h
          echo "Cleaning up unnecessary files..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Move artifacts to root
        run: |
          # Check if downloads directory exists and has files
          if [ ! -d "./downloads" ] || [ -z "$(ls -A ./downloads)" ]; then
            echo "No artifacts to move or downloads directory doesn't exist"
            exit 0
          fi

          # Calculate required space
          required_space=$(du -sb ./downloads | cut -f1)
          available_space=$(df -B1 . | awk 'NR==2 {print $4}')
          
          if [ $required_space -gt $available_space ]; then
            echo "Error: Not enough disk space. Required: $(($required_space/1024/1024))MB, Available: $(($available_space/1024/1024))MB"
            exit 1
          fi

          # Move files in smaller batches
          find ./downloads -type f -print0 | while IFS= read -r -d '' file; do
            target_dir="$(dirname "${file#./downloads/}")"
            mkdir -p "./$target_dir"
            cp "$file" "./$target_dir/" || echo "Failed to copy: $file"
          done
          
          # Clean up downloads directory only if copy was successful
          if [ $? -eq 0 ]; then
            rm -rf ./downloads
          else
            echo "Warning: Some files may not have been copied successfully"
            exit 1
          fi

      - name: Commit and push changes
        run: |
          git config user.name "${{ github.repository_owner }}"
          git config user.email "${{ github.repository_owner }}@users.noreply.github.com"

          # Create empty_ranges.log if it doesn't exist
          touch empty_ranges.log
          
          # Add empty range log if no images were found
          if [ "${{ needs.download-batch.outputs.has_images }}" = "false" ]; then
            echo "$(date '+%Y-%m-%d %H:%M:%S') - No images found in range ${{ needs.download-batch.outputs.start_range }} to ${{ needs.download-batch.outputs.end_range }} with prefix ${{ needs.download-batch.outputs.prefix }}" >> empty_ranges.log
          fi

          # Update range.json for next run
          next_start=$((${{ needs.prepare-matrix.outputs.total_end }} + 1))
          next_end=$((${{ needs.prepare-matrix.outputs.total_end }} + 501))
          echo "{\"start\": $next_start, \"end\": $next_end}" > range.json
          git add range.json

          # Add all downloaded images and empty ranges log
          git add .
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          today=$(date +%Y-%m-%d)
          if [ "${{ needs.download-batch.outputs.has_images }}" = "true" ]; then
            git commit -m "chore: download images for prefix ${{ needs.download-batch.outputs.prefix }} in ${today} from ids ${next_start} to ${next_end}"
          else
            git commit -m "log: no images found in range ${{ needs.download-batch.outputs.start_range }} to ${{ needs.download-batch.outputs.end_range }}"
          fi
          git push

      - name: Delete old artifacts
        env:
          REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "Fetching artifacts from repository..."
          artifacts=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/actions/artifacts" | jq -c '.artifacts[]')

          echo "Filtering artifacts for deletion..."
          for artifact in $artifacts; do
            id=$(echo $artifact | jq -r '.id')
            name=$(echo $artifact | jq -r '.name')
            size=$(echo $artifact | jq -r '.size_in_bytes')
            updated_at=$(echo $artifact | jq -r '.updated_at')
            size_in_gb=$((size / 1024 / 1024 / 1024))

            # Check if artifact is older than 1 day or larger than 3GB
            if [[ "$(date -d "$updated_at" +%s)" -lt "$(date -d '1 day ago' +%s)" || $size_in_gb -gt 3 ]]; then
              echo "Deleting artifact: $name (ID: $id, Size: $size_in_gb GB, Updated: $updated_at)"
              curl -X DELETE -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/actions/artifacts/$id"
            fi
          done