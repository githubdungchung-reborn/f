name: Organize Images into Range Branches

on:
  workflow_dispatch:
    inputs:
      start_range:
        description: "Start of range (optional)"
        required: false
        type: string
      end_range:
        description: "End of range (optional)"
        required: false
        type: string

jobs:
  organize-images:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Initial disk space cleanup
        run: |
          echo "Performing initial system cleanup..."
          # Remove unnecessary large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/share/powershell
          
          # Clear package manager caches
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          
          # Clear temp and log directories
          sudo rm -rf /tmp/*
          sudo find /var/log -type f -exec rm -f {} \;
          
          echo "Available disk space after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 1  # Reduce git history to save space
          sparse-checkout: |
            organize_range.json
            images_*
          sparse-checkout-cone-mode: false

      - name: Load or initialize range
        id: load-range
        run: |
          if [ -f organize_range.json ]; then
            start=$(jq -r '.start' organize_range.json)
            end=$(jq -r '.end' organize_range.json)
          else
            start="${{ inputs.start_range || '1000' }}"
            end="${{ inputs.end_range || '1500' }}"
            echo "{\"start\": $start, \"end\": $end}" > organize_range.json
          fi
          echo "start=$start" >> $GITHUB_OUTPUT
          echo "end=$end" >> $GITHUB_OUTPUT

      - name: Set up branch name
        id: branch
        run: |
          BRANCH_NAME="${{ steps.load-range.outputs.start }}_to_${{ steps.load-range.outputs.end }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name will be: $BRANCH_NAME"

      - name: Find matching image folders
        id: find-folders
        run: |
          # Monitor system resources
          free -h
          df -h
          
          # Clean up any temporary files and clear cache
          find . -type f -name "*.tmp" -delete
          sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
          
          # Use a more efficient find command with timeout protection
          echo "Searching for matching folders..."
          timeout 300 find . -maxdepth 1 -type d -name "images_*_*_${{ steps.load-range.outputs.start }}_to_${{ steps.load-range.outputs.end }}" > matched_folders.txt || {
            echo "Find command timed out after 5 minutes"
            exit 1
          }
          
          # Check if any folders were found
          if [ ! -s matched_folders.txt ]; then
            echo "No matching folders found"
            rm -f matched_folders.txt
            exit 1
          fi
          
          # Process the results in a controlled manner
          echo "folders<<EOF" >> $GITHUB_OUTPUT
          while IFS= read -r folder; do
            # Verify folder exists and is accessible
            if [ -d "$folder" ] && [ -r "$folder" ]; then
              echo "$folder" >> $GITHUB_OUTPUT
              echo "Found valid folder: $folder"
            fi
          done < matched_folders.txt
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Cleanup
          rm -f matched_folders.txt
          
          # Show resource status after completion
          echo "Resource status after folder search:"
          free -h
          df -h

      - name: Create and switch to range branch
        run: |
          # Clean up before branch operations
          git gc --prune=now
          
          BRANCH_NAME="${{ steps.branch.outputs.branch_name }}"
          git checkout -b "$BRANCH_NAME"
          
          # Clean the branch
          git rm -rf .
          git clean -fd

      - name: Copy matching folders to branch
        run: |
          # Process folders in smaller batches to manage memory
          while IFS= read -r folder; do
            folder="${folder#./}"
            if [ ! -z "$folder" ]; then
              echo "Processing folder: $folder"
              
              # Check available space
              available_space=$(df -BM / | awk 'NR==2 {print $4}' | sed 's/M//')
              if [ "$available_space" -lt "1000" ]; then
                echo "Low disk space, performing cleanup..."
                git gc --prune=now
                sudo rm -rf /tmp/*
              fi
              
              git checkout main -- "$folder"
            fi
          done <<< "${{ steps.find-folders.outputs.folders }}"
          
          git add .
          
          if ! git diff --cached --quiet; then
            git commit -m "feat: organize images for range ${{ steps.branch.outputs.branch_name }}"
          fi

      - name: Push range branch
        run: |
          # Compress objects before push
          git gc --aggressive --prune=now
          git push origin "${{ steps.branch.outputs.branch_name }}"

      - name: Switch back to main and cleanup
        run: |
          git checkout main
          
          # Remove folders in batches
          while IFS= read -r folder; do
            folder="${folder#./}"
            if [ ! -z "$folder" ]; then
              echo "Removing folder from main: $folder"
              rm -rf "$folder"
              git add -u "$folder"
              
              # Periodic cleanup
              if [ $((RANDOM % 5)) -eq 0 ]; then
                git gc --prune=now
              fi
            fi
          done <<< "${{ steps.find-folders.outputs.folders }}"
          
          # Update range for next run
          next_start=$((${{ steps.load-range.outputs.end }} + 1))
          next_end=$((${{ steps.load-range.outputs.end }} + 501))
          echo "{\"start\": $next_start, \"end\": $next_end}" > organize_range.json
          
          git add organize_range.json
          
          if ! git diff --cached --quiet; then
            git commit -m "chore: remove organized images for range ${{ steps.branch.outputs.branch_name }} and update range"
            git push origin main
          fi

      - name: Final cleanup
        if: always()
        run: |
          # Clean git objects
          git gc --aggressive --prune=now
          
          # Remove temporary files
          rm -rf /tmp/*
          
          echo "Final disk space status:"
          df -h 