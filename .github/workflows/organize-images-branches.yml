name: Organize Images into Range Branches

on:
  workflow_dispatch:
    inputs:
      start_range:
        description: "Start of range (optional)"
        required: false
        type: string
      end_range:
        description: "End of range (optional)"
        required: false
        type: string

jobs:
  organize-images:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    
    steps:
      - name: Initial disk space cleanup
        run: |
          echo "Performing initial system cleanup..."
          df -h
          
          # Remove unnecessary large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          
          # Clear package manager caches
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          # Clear temp and log directories
          sudo rm -rf /tmp/*
          sudo find /var/log -type f -exec rm -f {} \;
          
          echo "Available disk space after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 1
          ref: main
          sparse-checkout: |
            organize_range.json
            images_*
          sparse-checkout-cone-mode: false

      - name: Load or initialize range
        id: load-range
        run: |
          if [ -f organize_range.json ]; then
            start=$(jq -r '.start' organize_range.json)
            end=$(jq -r '.end' organize_range.json)
          else
            start="${{ inputs.start_range || '1000' }}"
            end="${{ inputs.end_range || '1500' }}"
            echo "{\"start\": $start, \"end\": $end}" > organize_range.json
          fi
          echo "start=$start" >> $GITHUB_OUTPUT
          echo "end=$end" >> $GITHUB_OUTPUT

      - name: Set up branch name
        id: branch
        run: |
          BRANCH_NAME="${{ steps.load-range.outputs.start }}_to_${{ steps.load-range.outputs.end }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name will be: $BRANCH_NAME"

      - name: Find and clean non-matching folders
        id: find-folders
        run: |
          echo "Current disk space:"
          df -h
          
          # Find matching folders first
          echo "Finding matching folders..."
          find . -maxdepth 1 -type d -name "images_*_*_${{ steps.load-range.outputs.start }}_to_${{ steps.load-range.outputs.end }}" > matched_folders.txt
          
          if [ ! -s matched_folders.txt ]; then
            echo "No matching folders found"
            rm -f matched_folders.txt
            exit 1
          fi
          
          # Save matching folders to output
          echo "folders<<EOF" >> $GITHUB_OUTPUT
          while IFS= read -r folder; do
            if [ -d "$folder" ] && [ -r "$folder" ]; then
              echo "$folder" >> $GITHUB_OUTPUT
              echo "Found matching folder: $folder"
            fi
          done < matched_folders.txt
          echo "EOF" >> $GITHUB_OUTPUT
          
          # First, save matching folders to a temporary location
          mkdir -p /tmp/matching_folders_backup
          while IFS= read -r folder; do
            cp -r "$folder" /tmp/matching_folders_backup/
          done < matched_folders.txt
          
          # Remove everything in current directory except .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} \;
          
          # Move matching folders back
          cp -r /tmp/matching_folders_backup/* .
          rm -rf /tmp/matching_folders_backup
          rm -f matched_folders.txt
          
          echo "Disk space after cleanup:"
          df -h

      - name: Create and switch to range branch
        run: |
          echo "Creating branch: ${{ steps.branch.outputs.branch_name }}"
          git config user.name "${{ github.repository_owner }}"
          git config user.email "${{ github.repository_owner }}@users.noreply.github.com"
          
          # Create new branch
          git checkout -b "${{ steps.branch.outputs.branch_name }}"
          
          # Clean the branch except matching folders
          git rm -rf .
          git clean -fd
          
          # Add matching folders back
          while IFS= read -r folder; do
            if [ ! -z "$folder" ]; then
              echo "Adding folder to branch: $folder"
              git checkout main -- "$folder"
            fi
          done <<< "${{ steps.find-folders.outputs.folders }}"
          
          # Commit changes
          git add .
          git commit -m "feat: organize images for range ${{ steps.branch.outputs.branch_name }}"

      - name: Push to branch
        run: |
          echo "Pushing to branch: ${{ steps.branch.outputs.branch_name }}"
          git push origin "${{ steps.branch.outputs.branch_name }}"

      - name: Cleanup before switching back
        run: |
          echo "Performing disk space cleanup..."
          df -h
          
          # Remove unnecessary files and directories
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          
          # Clear package manager caches
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          # Clear temp and log directories
          sudo rm -rf /tmp/*
          sudo find /var/log -type f -exec rm -f {} \;
          echo "Available disk space after cleanup:"
          df -h

      - name: Final cleanup
        if: always()
        run: |
          echo "Performing final cleanup..."
          
          # Remove all content except .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          
          # Clear system caches
          sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'
          
          echo "Final disk space status:"
          df -h

      - name: Update range file
        if: success()
        run: |
          git checkout main
          
          # Update range for next run
          next_start=$((${{ steps.load-range.outputs.end }} + 1))
          next_end=$((${{ steps.load-range.outputs.end }} + 501))
          echo "{\"start\": $next_start, \"end\": $next_end}" > organize_range.json
          
          git add organize_range.json
          
          if ! git diff --cached --quiet; then
            git config user.name "${{ github.repository_owner }}"
            git config user.email "${{ github.repository_owner }}@users.noreply.github.com"
            git commit -m "chore: update range to $next_start-$next_end"
            git push origin main
          fi

      - name: Re-trigger workflow
        if: success()
        run: |
          # Wait for 2 minutes to allow for system cooldown
          sleep 120
          
          # Trigger the workflow again using GitHub CLI
          gh workflow run organize-images-branches.yml \
            --ref main \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}